package controllers

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"taskupdate/initializers"
	"taskupdate/models"
	"time"

	"github.com/gorilla/mux"
	"github.com/xuri/excelize/v2"
	"gorm.io/datatypes"

	"gopkg.in/gomail.v2"
)

var DB = initializers.ConnectToDb()

type dummyTask struct {
	Date  string
	Tasks datatypes.JSON
}

func DailyTask(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	var task models.Task
	var dummyT dummyTask
	json.NewDecoder(r.Body).Decode(&dummyT)
	//string to time.Time format yyyy-mm-dd
	date, _ := time.Parse("2006-01-02", dummyT.Date)
	task.Date = date.Truncate(0)
	task.Tasks = dummyT.Tasks
	fmt.Println(task.Date)
	DB.Create(&task)
	json.NewEncoder(w).Encode(task)
}
func GetTasks(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content_Type", "application/json")
	var tasks []models.Task
	fmt.Println("I am In Tasks api")
	DB.Find(&tasks)
	json.NewEncoder(w).Encode(tasks)
}

type taskJsonInside struct {
	Task1     string `json:"task_1"`
	Status    string `json:"status"`
	EndTime   string `json:"end_time"`
	StartTime string `json:"start_time"`
}
type taskJson struct {
	Name string         `json:"name"`
	Task []driver.Value `json:"task"`
}

//	type AutoGenerated struct {
//		Name string
//		Task []struct {
//			Status    string
//			Task1     string
//			EndTime   string
//			StartTime string
//		}
//	}
type AutoGenerated struct {
	Name  string
	Tasks []struct {
		Taskname string
		Etime    string
		Stime    string
		Status   string
		Project  string
	}
}
type response struct {
	Id    int64
	Date  datatypes.Date
	Tasks taskJson
}

func Report(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	fmt.Println("testing")
	params := mux.Vars(r)
	var task []models.Task
	var dValA []driver.Value
	startT, _ := time.Parse("2006-01-02", params["StDate"])
	endT, _ := time.Parse("2006-01-02", params["EndDate"])
	// startT, _ := time.Parse("2010-12-21 05:30:00.000", params["StDate"])
	fmt.Println(startT)
	DB.Where("date BETWEEN ? AND ?", startT, endT).Find(&task)
	DATEFROM := startT.Format("02 January")
	DATEUPTO := endT.Format("02 January")
	fmt.Println(task)

	file := excelize.NewFile()
	style, _ := file.NewStyle(&excelize.Style{

		Font: &excelize.Font{
			Bold:   true,
			Italic: true,
			Family: "Bahnschrift SemiLight Condensed",
			Size:   18,
			Color:  "#FFFFFF",
		},
		Alignment: &excelize.Alignment{
			Horizontal: "center",
			Vertical:   "center",
			WrapText:   true,
		},
		Border: []excelize.Border{
			{Type: "left", Color: "000000", Style: 5},
			{Type: "top", Color: "000000", Style: 5},
			{Type: "bottom", Color: "000000", Style: 5},
			{Type: "right", Color: "000000", Style: 5},
		},
		Fill: excelize.Fill{Type: "pattern", Color: []string{"#1F4E78"}, Pattern: 1},
	})
	style2, _ := file.NewStyle(&excelize.Style{

		Font: &excelize.Font{
			Bold:   true,
			Italic: false,
			Family: "Bahnschrift SemiLight Condensed",
			Size:   14,
			Color:  "#FFFFFF",
		},
		Alignment: &excelize.Alignment{
			Horizontal: "center",
			Vertical:   "center",
			WrapText:   true,
		},
		Border: []excelize.Border{
			{Type: "left", Color: "000000", Style: 5},
			{Type: "top", Color: "000000", Style: 5},
			{Type: "bottom", Color: "000000", Style: 5},
			{Type: "right", Color: "000000", Style: 5},
		},
		Fill: excelize.Fill{Type: "pattern", Color: []string{"#1F4E78"}, Pattern: 1},
	})
	file.MergeCell("Sheet1", "A1", "F1")
	HeaderDate, _ := file.NewStyle(&excelize.Style{
		Font: &excelize.Font{
			Bold:   true,
			Italic: false,
			Family: "Bahnschrift",
			Size:   18,
			Color:  "#E2EFDA",
		},
		Alignment: &excelize.Alignment{
			Horizontal: "center",
			Vertical:   "center",
			WrapText:   true,
		},
		Fill: excelize.Fill{Type: "pattern", Color: []string{"#548235"}, Pattern: 1},
		Border: []excelize.Border{
			{Type: "left", Color: "000000", Style: 5},
			{Type: "top", Color: "000000", Style: 5},
			{Type: "bottom", Color: "000000", Style: 5},
			{Type: "right", Color: "000000", Style: 5},
		},
	})
	file.SetRowHeight("Sheet1", 1, 52)
	file.SetCellValue("Sheet1", "A1", "TASK REPORT "+DATEFROM+" TO "+DATEUPTO)
	file.SetCellStyle("Sheet1", "A1", "A1", HeaderDate)

	file.SetCellValue("Sheet1", "B2", "Project")
	file.SetCellValue("Sheet1", "C2", "Taskname")
	file.SetCellValue("Sheet1", "D2", "StartTime")
	file.SetCellValue("Sheet1", "E2", "EndTime")
	file.SetCellValue("Sheet1", "F2", "Status")
	file.SetCellStyle("Sheet1", "A2", "A2", style)
	file.SetCellStyle("Sheet1", "B2", "B2", style2)
	file.SetCellStyle("Sheet1", "C2", "C2", style)
	file.SetCellStyle("Sheet1", "D2", "D2", style2)
	file.SetCellStyle("Sheet1", "E2", "E2", style2)
	file.SetCellStyle("Sheet1", "F2", "F2", style2)
	file.SetColWidth("Sheet1", "C", "C", 75)
	file.SetColWidth("Sheet1", "B", "B", 18)
	file.SetColWidth("Sheet1", "D", "F", 18)
	file.SetRowHeight("Sheet1", 2, 35)
	file.SetColWidth("Sheet1", "A", "A", 25)
	file.MergeCell("Sheet1", "A1", "E1")
	k := 0
	var taskJson2 AutoGenerated
	for _, m := range task {
		fmt.Println("Id is", m.Id)
		fmt.Println("Date is", m.Date)
		val, _ := m.Tasks.Value()
		dValA = append(dValA, val)
		taskJsonString := m.Tasks.String()

		json.Unmarshal([]byte(taskJsonString), &taskJson2)
		fmt.Println(taskJson2.Name)
		// rows := [][]string{
		// 	{"TaskName", "StartTime", "EndTime", "Status"},
		// }

		DateStyle, _ := file.NewStyle(&excelize.Style{
			Font: &excelize.Font{
				Bold:   false,
				Italic: false,
				Family: "Calibri",
				Size:   12,
				Color:  "#000000",
			},
			Alignment: &excelize.Alignment{
				Horizontal: "center",
				Indent:     1,
				Vertical:   "center",
				WrapText:   true,
			},
		})

		for i, v := range taskJson2.Tasks {
			fmt.Println(v.Taskname)
			fmt.Println(v.Stime)
			fmt.Println(v.Etime)
			fmt.Println(v.Status)
			// rows = [i+1][i+1]{
			// 	{"TaskName", "StartTime", "EndTime", "Status"},
			// }

			file.SetRowHeight("Sheet1", k+3, 50)
			if i == 0 {
				file.MergeCell("Sheet1", "A"+strconv.Itoa(k+3), "A"+strconv.Itoa(k+2+len(taskJson2.Tasks)))
				file.SetCellValue("Sheet1", "A"+strconv.Itoa(k+3), m.Date.Format("2006-Jan-02"))
				file.SetCellStyle("Sheet1", "A"+strconv.Itoa(k+3), "A"+strconv.Itoa(k+3), DateStyle)
			}

			file.SetCellValue("Sheet1", "C"+strconv.Itoa(k+3), v.Taskname)
			Tnamestyle, _ := file.NewStyle(&excelize.Style{
				Font: &excelize.Font{
					Bold:   false,
					Italic: false,
					Family: "Calibri",
					Size:   11,
					Color:  "Dark Blue",
				},
				Alignment: &excelize.Alignment{
					Horizontal:  "left",
					Indent:      1,
					ShrinkToFit: true,
					Vertical:    "center",
					WrapText:    true,
				},
			})
			file.SetCellStyle("Sheet1", "C"+strconv.Itoa(k+3), "C"+strconv.Itoa(k+3), Tnamestyle)
			Tnamestyle2, _ := file.NewStyle(&excelize.Style{
				Font: &excelize.Font{
					Bold:   false,
					Italic: false,
					Family: "Calibri",
					Size:   11,
				},
				Alignment: &excelize.Alignment{

					Horizontal: "center",
					Vertical:   "center",
					WrapText:   true,
				},
			})
			file.SetCellValue("Sheet1", "B"+strconv.Itoa(k+3), v.Project)
			file.SetCellStyle("Sheet1", "B"+strconv.Itoa(k+3), "B"+strconv.Itoa(k+3), Tnamestyle2)
			file.SetCellValue("Sheet1", "D"+strconv.Itoa(k+3), v.Stime)
			file.SetCellStyle("Sheet1", "D"+strconv.Itoa(k+3), "D"+strconv.Itoa(k+3), Tnamestyle2)
			file.SetCellValue("Sheet1", "E"+strconv.Itoa(k+3), v.Etime)
			file.SetCellStyle("Sheet1", "E"+strconv.Itoa(k+3), "E"+strconv.Itoa(k+3), Tnamestyle2)
			file.SetCellValue("Sheet1", "F"+strconv.Itoa(k+3), v.Status)
			file.SetCellStyle("Sheet1", "F"+strconv.Itoa(k+3), "F"+strconv.Itoa(k+3), Tnamestyle2)
			k++
		}

	}
	//var res response[]
	//res.Id=

	if err := file.SaveAs(taskJson2.Name + "_TasksReport.xlsx"); err != nil {
		log.Fatal(err)
	}

	m := gomail.NewMessage()
	m.SetHeader("From", "karthikgm2412@gmail.com")
	m.SetHeader("To", "karthikgm2412@gmail.com")
	//m.SetAddressHeader("Cc", "dan@example.com", "Dan")
	m.SetHeader("Subject", "Task Report For "+DATEFROM+" TO "+DATEUPTO)
	m.SetBody("text/html", "Hello <b>"+taskJson2.Name+"</b> report is <i>ATTACHED</i>!")
	m.Attach(taskJson2.Name + "_TasksReport.xlsx")

	d := gomail.NewDialer("smtp.gmail.com", 587, "karthikgm2412@gmail.com", "azadxudwkzbestsy")

	// Send the email to Bob, Cora and Dan.
	if err := d.DialAndSend(m); err != nil {
		panic(err)
	}
	json.NewEncoder(w).Encode(dValA)

	//Email Password -- > azadxudwkzbestsy

}
